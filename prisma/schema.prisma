// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  fullName            String
  password            String
  forgotPasswordToken String?   @unique
  forgotPasswordTime  DateTime?
  status              Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  orders  Order[]
  doctor  Doctor?
  patient Patient?
  admin   Admin?
}

model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  code        String
  image       String
  category    String
  price       Int
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders ProductOrder[]
}

model Order {
  id        String   @id @default(cuid())
  address   String
  city      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User           @relation(fields: [userId], references: [id])
  userId    String
  products  ProductOrder[]
  country   Country        @relation(fields: [countryId], references: [id])
  countryId String
}

model ProductOrder {
  id        String   @id @default(cuid())
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Patient {
  id        String   @id @default(cuid())
  rh        String
  gender    Genders
  birthDate DateTime
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  country      Country       @relation(fields: [countryId], references: [id])
  countryId    String
}

enum Genders {
  FEMALE
  MALE
}

model Appointment {
  id                  String   @id @default(cuid())
  appointmentDataTime DateTime
  hospital            String
  reason              String
  status              Status
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String
  doctor    Doctor  @relation(fields: [doctorId], references: [id])
  doctorId  String
}

enum Status {
  PENDING
  DONE
  CANCELLED
}

model Doctor {
  id        String   @id @default(cuid())
  image     String
  phone     String
  facebook  String?
  twitter   String?
  linkedin  String?
  instagram String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
  user         User               @relation(fields: [userId], references: [id])
  userId       String             @unique
  specialities SpecialityDoctor[]
}

model SpecialityDoctor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor       Doctor     @relation(fields: [doctorId], references: [id])
  doctorId     String
  speciality   Speciality @relation(fields: [specialityId], references: [id])
  specialityId String
}

model Speciality {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctors SpecialityDoctor[]
}

model Country {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient[]
  order   Order[]
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}
